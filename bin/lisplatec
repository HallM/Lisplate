#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var fs = require('fs');

var compiler = require('../lib/compiler');

program
  .version(require('../package.json').version)
  .usage('[options] <file|dir ...>')
  .option('-b, --basedir <dir>', 'starting directory to base template names from')
  .option('-o, --outdir <dir>', 'the directory to output files to *required*')
  .option('-e, --ext <ext>', 'the template extention when using a directory, defaults to "ltml"')
  .parse(process.argv);

var files = program.args;
var basedir = program.basedir || '';
var outdir = program.outdir || null;

function fatalError(str) {
    console.log(str);
    process.exit(1);
}

if (!outdir) {
    fatalError('The outdir must be defined');
}

basedir = basedir.replace(/\\/g, '/');
outdir = outdir.replace(/\\/g, '/');

if (basedir.length && basedir[basedir.length-1] !== '/') {
    basedir += '/';
}

files.forEach(function(file) {
    if (!startsWith(file, basedir)) {
        fatalError('The path `' + file + '` is not within the basedir, `' + basedir + '`');
    }

    var stats = fs.statSync(file);
    if (stats.isDirectory()) {
        processDirectory(file);
    } else if (stats.isFile()) {
        processFile(file);
    } else {
        fatalError(file + ' is not a directory or a file');
    }
});

function startsWith(str, starts) {
    return str.length > starts.length && str.substring(0, starts.length) === starts;
}
function endsWith(str, ends) {
    return str.length > ends.length && str.substring(str.length - ends.length) === ends;
}

function getDirectory(file) {
    var index = file.lastIndexOf('/');
    if (index !== -1) {
        return file.substring(0, index);
    } else {
        return file;
    }
}

function getTemplateName(file) {
    var templateName = file.substring(basedir.length);
    var index = templateName.indexOf('.');
    if (index !== -1) {
        return templateName.substring(0, index);
    } else {
        return templateName;
    }
}

function makeDirectories(dir) {
    var parts = dir.split('/');
    var dirpath = parts[0];
    for (var i=0; i < parts.length; i++) {
        try {
            var stats = fs.statSync(dirpath);
            if (!stats.isDirectory()) {
                fatalError(dirpath + ' is not a directory to output to');
            }
        } catch(e) {
            fs.mkdirSync(dirpath);
        }
        dirpath = dirpath + '/' + parts[i+1];
    }
}

function processDirectory(dir) {
    var files = fs.readdirSync(dir);
    files.forEach(function(file) {
        var filepath = dir + '/' + file;

        var stats = fs.statSync(filepath);
        if (stats.isDirectory()) {
            processDirectory(filepath);
        } else if (stats.isFile()) {
            if (endsWith(filepath, program.ext)) {
                processFile(filepath);
            }
        } else {
            fatalError(file + ' is not a directory or a file');
        }
    });
}

function processFile(file) {
    var templateName = getTemplateName(file);
    var filepath = path.resolve(file);
    var outputpath = outdir + '/' + templateName + '.js';
    var templateDirectory = getDirectory(outputpath);

    var src = fs.readFileSync(filepath, 'UTF-8');
    var compiled = compiler.compileModule(templateName, src);

    // make directories
    makeDirectories(templateDirectory);

    fs.writeFileSync(outputpath, compiled, 'UTF-8');
    console.log('Compiled `' + filepath + '` and wrote to `' + outputpath + '`');
}
